use clap::{Parser, Subcommand};

#[derive(Parser, Debug, Clone)]
#[command(version, about, long_about = None)]
#[command(propagate_version = true)]
pub struct Args {
    #[command(subcommand)]
    pub command: Commands,

    #[arg(long, global = true)]
    pub dry_run: bool,
}

#[derive(Subcommand, strum::Display, Debug, Clone)]
pub enum TicketCommands {
    /// Info about the current branch or given userStory id
    Get {
        /// userStory ID or URL
        id_or_url: Option<String>,
    },
    /// Run `git flow start` and update status/assigned developer
    Start {
        /// userStory ID or URL
        id_or_url: Option<String>,

        /// Branch name (by default it's autogenerated from userStory title)
        #[arg(long, short)]
        branch: Option<String>,

        /// Do not perform git flow actions
        #[arg(long)]
        no_git: bool,

        /// Do not update userStory status/developer
        #[arg(long)]
        no_assign: bool,
    },
    /// Run `git flow finish`
    Finish { id_or_url: Option<String> },
    /// Opens userStory in the browser
    Open { id_or_url: Option<String> },
    /// Print userStory link
    Link { id_or_url: Option<String> },
}

#[derive(Subcommand, strum::Display, Debug, Clone)]
pub enum PullRequestCommands {
    /// Craete a PR
    Create {
        /// Do not notify slack channel
        #[arg(long)]
        no_slack: bool,

        /// PR title
        #[arg(long, short)]
        title: Option<String>,

        /// PR description
        #[arg(long, short)]
        description: Option<String>,

        /// PR base branch
        #[arg(long, short, default_value = "develop")]
        base: String,
    },
    /// Retrive a PR
    View {
        id: Option<String>,

        #[arg(long, short)]
        web: bool,
    },
    /// Squash merge a PR
    Merge { id: Option<String> },
}

#[derive(Subcommand, strum::Display, Debug, Clone)]
pub enum Commands {
    /// Manage target process
    Ticket {
        #[command(subcommand)]
        subcommands: TicketCommands,
    },
    /// Craete / Manage and List pull requests
    #[clap(alias = "pr")]
    PullRequest {
        #[command(subcommand)]
        subcommands: PullRequestCommands,

        /// aws profile
        #[arg(long, default_value = "default")]
        profile: String,
    },
}
