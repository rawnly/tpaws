use clap::{Parser, Subcommand};
use commands::aws::PullRequestStatus;

#[derive(Parser, Debug, Clone)]
#[command(about, long_about = None)]
// #[command(propagate_version = true)]
pub struct Args {
    #[command(subcommand)]
    pub command: Option<Commands>,

    /// do not perform any action
    #[arg(long, global = true)]
    pub dry_run: bool,

    /// do not print any output/spinner
    #[arg(long, global = true)]
    pub quiet: bool,

    /// do not print any output/spinner
    #[arg(long, global = true)]
    pub debug: bool,

    /// print current version
    #[arg(long, short = 'v')]
    pub version: bool,
}

#[derive(Debug, Clone, strum::Display, strum::EnumString)]
pub enum ReleasePushTarget {
    Staging,
    Prod,
    All,
}

#[derive(Subcommand, strum::Display, Debug, Clone)]
pub enum ReleaseCommands {
    Start {
        #[arg(long)]
        patch: bool,

        #[arg(long, default_value = "true")]
        minor: bool,

        #[arg(long)]
        major: bool,
    },
    Push {
        #[arg(long, short, default_value = "All")]
        target: ReleasePushTarget,

        /// pipeline to trigger
        #[arg(long, short = 'n')]
        pipeline_name: Option<String>,

        /// aws profile
        #[arg(long, default_value = "default")]
        profile: String,
    },
    Finish,
}

#[derive(Subcommand, strum::Display, Debug, Clone)]
pub enum TicketCommands {
    Init {
        #[arg(long, short)]
        project: Option<String>,
    },
    /// Info about the current branch or given userStory id
    View {
        /// userStory ID or URL
        id_or_url: Option<String>,

        /// Opens userStory in the browser
        #[arg(long, short)]
        web: bool,

        /// Opens userStory in the browser
        #[arg(long)]
        json: bool,
    },
    /// Run `git flow start` and update status/assigned developer
    Start {
        /// userStory ID or URL
        id_or_url: Option<String>,

        /// Branch name (by default it's autogenerated from userStory title)
        #[arg(long, short)]
        branch: Option<String>,

        /// Do not perform git flow actions
        #[arg(long)]
        no_git: bool,

        /// Do not update userStory status/developer
        #[arg(long)]
        no_assign: bool,

        #[arg(long, short = 'P')]
        project: Option<String>,
    },

    /// Print userStory link
    Link { id_or_url: Option<String> },

    /// Print userStory link
    GetBranch { id_or_url: String },

    /// Print userStory ID
    GetId { url: Option<String> },

    GenerateCommit {
        id_or_url: Option<String>,

        #[arg(long, default_value_t = false)]
        json: bool,

        #[arg(long, default_value_t = false)]
        title_only: bool,
    },

    /// Generate a changelog from a targetprocess release
    #[clap(alias = "changelog")]
    GenerateChangelog {
        from: usize,

        to: Option<usize>,

        #[arg(long, short = 'P')]
        project: String,

        #[arg(long, short = 'p', default_value_t = String::new())]
        prefix: String,

        #[arg(long, default_value_t = false)]
        plain: bool,

        #[arg(long, default_value_t = false)]
        no_title: bool,
    },
}

#[derive(Subcommand, strum::Display, Debug, Clone)]
pub enum PullRequestCommands {
    /// Create a PR
    Create {
        /// Do not notify slack channel
        #[arg(long)]
        slack: bool,

        #[arg(long, default_value = "true")]
        copy: bool,

        /// PR title
        #[arg(long, short)]
        title: Option<String>,

        /// PR description
        #[arg(long, short)]
        description: Option<String>,

        /// PR base branch
        #[arg(long, short, default_value = "develop")]
        base: String,

        #[arg(long, default_value_t = false)]
        ai: bool,

        /// For more info see: https://console.groq.com/docs/models#production-models
        #[arg(long)]
        ai_model: Option<String>,
    },
    /// Retrive a PR
    View {
        /// PR id
        id: Option<String>,

        /// open the PR in the browser
        #[arg(long, short)]
        copy_url: bool,

        #[arg(long)]
        markdown: bool,

        /// open the PR in the browser
        #[arg(long, short)]
        web: bool,
    },
    List {
        #[arg(long)]
        interactive: bool,

        #[arg(long, short)]
        status: Option<PullRequestStatus>,
    },
}

#[derive(Subcommand, strum::Display, Debug, Clone)]
pub enum ConfigCommands {
    Reset,
}

#[derive(Subcommand, strum::Display, Debug, Clone)]
pub enum Commands {
    /// Manage configs
    #[clap(visible_alias = "cfg")]
    Config {
        #[command(subcommand)]
        subcommands: ConfigCommands,
    },

    /// Manage target process
    #[clap(visible_alias = "us")]
    Ticket {
        #[command(subcommand)]
        subcommands: TicketCommands,
    },
    /// Create / Manage and List pull requests
    #[clap(visible_alias = "pr")]
    PullRequest {
        #[command(subcommand)]
        subcommands: PullRequestCommands,

        /// aws profile
        #[arg(long, default_value = "default")]
        profile: String,
    },

    Init {
        #[arg(long, default_value = "false")]
        force: bool,

        #[arg(long)]
        project: Option<String>,
    },
}
